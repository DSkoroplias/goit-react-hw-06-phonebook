{"version":3,"file":"static/js/568.7e9e69c2.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-06-phonebook/./src/modules/Phonebook/ContactForm/contact-form.module.scss?1d1b","modules/Phonebook/ContactForm/ContactForm.jsx","modules/Phonebook/ContactListEl/ContactListEl.jsx","modules/Phonebook/ContactList/contact-list.module.scss","modules/Phonebook/ContactList/ContactList.jsx","webpack://goit-react-hw-06-phonebook/./src/modules/Phonebook/ContactFilter/contact-filter.module.scss?5ecc","modules/Phonebook/ContactFilter/ContactFilter.jsx","redux/contacts/contacts-selectors.js","redux/filter/filter-selector.js","webpack://goit-react-hw-06-phonebook/./src/modules/Phonebook/phonebook.module.scss?7709","modules/Phonebook/Phonebook.jsx","page/Home/Home.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"block\":\"contact-form_block__kwj7e\"};","import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport styles from './contact-form.module.scss';\n\nconst ContactForm = ({ onSubmit }) => {\n  const [state, setState] = useState({\n    name: '',\n    number: '',\n  });\n\n  const handleChange = ({ target }) => {\n    const { name, value } = target;\n    setState(prevState => {\n      return { ...prevState, [name]: value };\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({ name, number });\n    setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  const { name, number } = state;\n\n  return (\n    <div className={styles.block}>\n      <form onSubmit={handleSubmit}>\n        <div className={styles.formGroup}>\n          <label>Name</label>\n          <input\n            onChange={handleChange}\n            value={name}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </div>\n        <div className={styles.formGroup}>\n          <label>Number</label>\n          <input\n            onChange={handleChange}\n            value={number}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </div>\n        <button type=\"submit\">Add contact</button>\n      </form>\n    </div>\n  );\n};\n\nexport default ContactForm;\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\n// class ContactForm extends Component {\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   handleSubmit = e => {\n//     e.preventDefault();\n//     const { onSubmit } = this.props;\n//     const result = onSubmit({ ...this.state });\n//     if (result) {\n//       this.reset();\n//     }\n//   };\n\n//   reset() {\n//     this.setState({\n//       name: '',\n//       number: '',\n//     });\n//   }\n\n//   handleChange = ({ target }) => {\n//     const { name, value } = target;\n//     this.setState({\n//       [name]: value,\n//     });\n//   };\n\n//   render() {\n//     const { handleChange, handleSubmit } = this;\n//     const { name, number } = this.state;\n//     return (\n//       <div className={styles.block}>\n//         <form onSubmit={handleSubmit}>\n//           <div className={styles.formGroup}>\n//             <label>Name</label>\n//             <input\n//               onChange={handleChange}\n//               value={name}\n//               type=\"text\"\n//               name=\"name\"\n//               pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//               title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//               required\n//             />\n//           </div>\n//           <div className={styles.formGroup}>\n//             <label>Number</label>\n//             <input\n//               onChange={handleChange}\n//               value={number}\n//               type=\"tel\"\n//               name=\"number\"\n//               pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//               title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//               required\n//             />\n//           </div>\n//           <button type=\"submit\">Add contact</button>\n//         </form>\n//       </div>\n//     );\n//   }\n// }\n\n// export default ContactForm;\n\n// ContactForm.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// };\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nconst ContactListEl = ({ id, name, number, removeContact }) => {\n  return (\n    <ul>\n      <li key={id}>\n        {name}: {number}\n        <button onClick={removeContact} type=\"button\">\n          Delete\n        </button>\n      </li>\n    </ul>\n  );\n};\n\nexport default ContactListEl;\n\nContactListEl.propTypes = {\n  removeContact: PropTypes.func.isRequired,\n  id: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {};","import PropTypes from 'prop-types';\n\nimport ContactListEl from '../ContactListEl/ContactListEl';\n\nimport styles from './contact-list.module.scss';\n\nconst ContactList = ({ removeContact, contacts }) => {\n  return (\n    <div className={styles.contacts}>\n      {contacts.map(({ id, name, number }) => (\n        <ContactListEl\n          key={id}\n          name={name}\n          number={number}\n          removeContact={() => removeContact(id)}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default ContactList;\n\nContactList.defaultProps = {\n  // contacts: [],\n};\n\nContactList.propTypes = {\n  removeContact: PropTypes.func.isRequired,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"formGroup\":\"contact-filter_formGroup__7NSTt\"};","import PropTypes from 'prop-types';\n\nimport styles from './contact-filter.module.scss';\n\nconst ContactFilter = ({ handleChange, value }) => {\n  return (\n    <div className={styles.formGroup}>\n      <label htmlFor=\"\">Find contacts by name</label>\n      <input\n        value={value}\n        onChange={handleChange}\n        name=\"filter\"\n        type=\"text\"\n        placeholder=\"Filter books\"\n      />\n    </div>\n  );\n};\n\nexport default ContactFilter;\n\nContactFilter.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n};\n","export const getAllContacts = store => store.contacts;\nexport const getFilteredContacts = ({ contacts, filter }) => {\n  if (!filter) {\n    return contacts;\n  }\n  const normalizedFilter = filter.toLowerCase();\n  const result = contacts.filter(({ name }) => {\n    return name.toLowerCase().includes(normalizedFilter);\n  });\n\n  return result;\n};\n","export const getFilter = ({ filter }) => filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"phonebook_wrapper__U-FYE\",\"block\":\"phonebook_block__jmJea\"};","import { useSelector, useDispatch } from 'react-redux';\n\nimport ContactForm from './ContactForm/ContactForm';\nimport ContactList from './ContactList/ContactList';\nimport ContactFilter from './ContactFilter/ContactFilter';\n\n// import items from './items';\n\nimport { addContact, removeContact } from '../../redux/contacts/contacts-slice';\nimport { setFilter } from '../../redux/filter/filter-slice';\nimport {\n  getAllContacts,\n  getFilteredContacts,\n} from '../../redux/contacts/contacts-selectors';\n\nimport { getFilter } from '../../redux/filter/filter-selector';\n\nimport styles from './phonebook.module.scss';\n\nconst Phonebook = () => {\n  const filteredContacts = useSelector(getFilteredContacts);\n  const allContacts = useSelector(getAllContacts);\n  const filter = useSelector(getFilter);\n\n  const dispatch = useDispatch();\n\n  // useEffect(() => {\n  //   localStorage.setItem('my-contacts', JSON.stringify(contacts));\n  // }, [contacts]);\n\n  const isDuplicate = name => {\n    const normalizedName = name.toUpperCase();\n\n    const result = allContacts.find(({ name }) => {\n      return name.toUpperCase() === normalizedName;\n    });\n    return Boolean(result);\n  };\n\n  const handleAddContact = ({ name, number }) => {\n    if (isDuplicate(name)) {\n      alert(`${name} is already in contacts`);\n      return false;\n    }\n\n    dispatch(addContact({ name, number }));\n  };\n\n  const handleRemoveContact = id => {\n    dispatch(removeContact(id));\n  };\n\n  const handleFilter = ({ target }) => {\n    dispatch(setFilter(target.value));\n  };\n\n  const isContacts = Boolean(filteredContacts.length);\n\n  return (\n    <div className={styles.wrapper}>\n      <h1>Phonebook</h1>\n      <ContactForm onSubmit={handleAddContact} />\n      <h1>Contacts</h1>\n      <ContactFilter value={filter} handleChange={handleFilter} />\n      {isContacts && (\n        <ContactList\n          removeContact={handleRemoveContact}\n          contacts={filteredContacts}\n        />\n      )}\n      {!isContacts && <p>No contacts</p>}\n    </div>\n  );\n};\n\nexport default Phonebook;\n\n// class App extends Component {\n//   state = {\n//     contacts: [],\n//     filter: '',\n//   };\n\n//   componentDidMount() {\n//     const contacts = JSON.parse(localStorage.getItem('my-contacts'));\n//     if (contacts && contacts.length) {\n//       this.setState({ contacts });\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     const { contacts } = this.state;\n//     if (prevState.items !== items) {\n//       localStorage.setItem('my-contacts', JSON.stringify(contacts));\n//     }\n//   }\n\n//   addContact = ({ name, number }) => {\n//     if (this.isDuplicate(name)) {\n//       alert(`${name} is already in contacts`);\n//       return false;\n//     }\n\n//     this.setState(prevState => {\n//       const { contacts } = prevState;\n//       const newContact = {\n//         id: nanoid(),\n//         name,\n//         number,\n//       };\n//       return { contacts: [newContact, ...contacts] };\n//     });\n//     return true;\n//   };\n\n//   handleFilter = ({ target }) => {\n//     this.setState({ filter: target.value });\n//   };\n\n//   removeContact = id => {\n//     this.setState(({ contacts }) => {\n//       const newContact = contacts.filter(contact => contact.id !== id);\n//       return { contacts: newContact };\n//     });\n//   };\n\n//   isDuplicate(name) {\n//     const normalizedName = name.toUpperCase();\n//     const { contacts } = this.state;\n//     const result = contacts.find(({ name }) => {\n//       return name.toUpperCase() === normalizedName;\n//     });\n//     return Boolean(result);\n//   }\n\n//   getFilteredContact() {\n//     const { filter, contacts } = this.state;\n//     if (!filter) {\n//       return contacts;\n//     }\n//     const normalizedFilter = filter.toLowerCase();\n//     const result = contacts.filter(({ name }) => {\n//       return name.toLowerCase().includes(normalizedFilter);\n//     });\n\n//     return result;\n//   }\n\n//   render() {\n//     const { addContact, handleFilter, removeContact } = this;\n//     const contacts = this.getFilteredContact();\n\n//     return (\n//       <div className={styles.wrapper}>\n//         <h1>Phonebook</h1>\n//         <ContactForm onSubmit={addContact} />\n//         <h1>Contacts</h1>\n//         <ContactFilter handleChange={handleFilter} />\n//         <ContactList removeContact={removeContact} contacts={contacts} />\n//       </div>\n//     );\n//   }\n// }\n","import Phonebook from 'modules/Phonebook/Phonebook';\n\nconst Home = () => {\n  return <Phonebook />;\n};\n\nexport default Home;\n"],"names":["onSubmit","useState","name","number","state","setState","handleChange","target","value","prevState","className","styles","e","preventDefault","onChange","type","pattern","title","required","id","removeContact","onClick","ContactList","contacts","map","defaultProps","htmlFor","placeholder","getAllContacts","store","getFilteredContacts","filter","normalizedFilter","toLowerCase","includes","getFilter","filteredContacts","useSelector","allContacts","dispatch","useDispatch","isContacts","Boolean","length","normalizedName","toUpperCase","result","find","isDuplicate","alert","addContact","setFilter"],"sourceRoot":""}