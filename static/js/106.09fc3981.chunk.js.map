{"version":3,"file":"static/js/106.09fc3981.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","webpack://goit-react-hw-06-phonebook/./src/modules/Phonebook/ContactForm/contact-form.module.scss?1d1b","modules/Phonebook/ContactForm/ContactForm.jsx","modules/Phonebook/ContactListEl/ContactListEl.jsx","modules/Phonebook/ContactList/contact-list.module.scss","modules/Phonebook/ContactList/ContactList.jsx","webpack://goit-react-hw-06-phonebook/./src/modules/Phonebook/ContactFilter/contact-filter.module.scss?5ecc","modules/Phonebook/ContactFilter/ContactFilter.jsx","webpack://goit-react-hw-06-phonebook/./src/modules/Phonebook/phonebook.module.scss?7709","modules/Phonebook/Phonebook.jsx","page/Home/Home.jsx"],"sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}","// extracted by mini-css-extract-plugin\nexport default {\"block\":\"contact-form_block__kwj7e\"};","import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport styles from './contact-form.module.scss';\n\nconst ContactForm = ({ onSubmit }) => {\n  const [state, setState] = useState({\n    name: '',\n    number: '',\n  });\n\n  const handleChange = ({ target }) => {\n    const { name, value } = target;\n    setState(prevState => {\n      return { ...prevState, [name]: value };\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({ name, number });\n    setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  const { name, number } = state;\n\n  return (\n    <div className={styles.block}>\n      <form onSubmit={handleSubmit}>\n        <div className={styles.formGroup}>\n          <label>Name</label>\n          <input\n            onChange={handleChange}\n            value={name}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </div>\n        <div className={styles.formGroup}>\n          <label>Number</label>\n          <input\n            onChange={handleChange}\n            value={number}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </div>\n        <button type=\"submit\">Add contact</button>\n      </form>\n    </div>\n  );\n};\n\nexport default ContactForm;\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\n// class ContactForm extends Component {\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   handleSubmit = e => {\n//     e.preventDefault();\n//     const { onSubmit } = this.props;\n//     const result = onSubmit({ ...this.state });\n//     if (result) {\n//       this.reset();\n//     }\n//   };\n\n//   reset() {\n//     this.setState({\n//       name: '',\n//       number: '',\n//     });\n//   }\n\n//   handleChange = ({ target }) => {\n//     const { name, value } = target;\n//     this.setState({\n//       [name]: value,\n//     });\n//   };\n\n//   render() {\n//     const { handleChange, handleSubmit } = this;\n//     const { name, number } = this.state;\n//     return (\n//       <div className={styles.block}>\n//         <form onSubmit={handleSubmit}>\n//           <div className={styles.formGroup}>\n//             <label>Name</label>\n//             <input\n//               onChange={handleChange}\n//               value={name}\n//               type=\"text\"\n//               name=\"name\"\n//               pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//               title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//               required\n//             />\n//           </div>\n//           <div className={styles.formGroup}>\n//             <label>Number</label>\n//             <input\n//               onChange={handleChange}\n//               value={number}\n//               type=\"tel\"\n//               name=\"number\"\n//               pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//               title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//               required\n//             />\n//           </div>\n//           <button type=\"submit\">Add contact</button>\n//         </form>\n//       </div>\n//     );\n//   }\n// }\n\n// export default ContactForm;\n\n// ContactForm.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// };\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nconst ContactListEl = ({ id, name, number, removeContact }) => {\n  return (\n    <ul>\n      <li key={id}>\n        {name}: {number}\n        <button onClick={removeContact} type=\"button\">\n          Delete\n        </button>\n      </li>\n    </ul>\n  );\n};\n\nexport default ContactListEl;\n\nContactListEl.propTypes = {\n  removeContact: PropTypes.func.isRequired,\n  id: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {};","import PropTypes from 'prop-types';\n\nimport ContactListEl from '../ContactListEl/ContactListEl';\n\nimport styles from './contact-list.module.scss';\n\nconst ContactList = ({ removeContact, contacts }) => {\n  return (\n    <div className={styles.contacts}>\n      {contacts.map(({ id, name, number }) => (\n        <ContactListEl\n          key={id}\n          name={name}\n          number={number}\n          removeContact={() => removeContact(id)}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default ContactList;\n\nContactList.defaultProps = {\n  // contacts: [],\n};\n\nContactList.propTypes = {\n  removeContact: PropTypes.func.isRequired,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"formGroup\":\"contact-filter_formGroup__7NSTt\"};","import PropTypes from 'prop-types';\n\nimport styles from './contact-filter.module.scss';\n\nconst ContactFilter = ({ handleChange }) => {\n  return (\n    <div className={styles.formGroup}>\n      <label htmlFor=\"\">Find contacts by name</label>\n      <input\n        onChange={handleChange}\n        name=\"filter\"\n        type=\"text\"\n        placeholder=\"Filter books\"\n      />\n    </div>\n  );\n};\n\nexport default ContactFilter;\n\nContactFilter.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"phonebook_wrapper__U-FYE\",\"block\":\"phonebook_block__jmJea\"};","import { useState, useEffect } from 'react';\nimport { nanoid } from 'nanoid';\n\nimport ContactForm from './ContactForm/ContactForm';\nimport ContactList from './ContactList/ContactList';\nimport ContactFilter from './ContactFilter/ContactFilter';\n\n// import items from './items';\n\nimport styles from './phonebook.module.scss';\n\nconst Phonebook = () => {\n  const [contacts, setContacts] = useState(() => {\n    const contacts = JSON.parse(localStorage.getItem('my-contacts'));\n    return contacts?.length ? contacts : [];\n  });\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    localStorage.setItem('my-contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const isDuplicate = name => {\n    const normalizedName = name.toUpperCase();\n\n    const result = contacts.find(({ name }) => {\n      return name.toUpperCase() === normalizedName;\n    });\n    return Boolean(result);\n  };\n\n  const addContact = ({ name, number }) => {\n    if (isDuplicate(name)) {\n      alert(`${name} is already in contacts`);\n      return false;\n    }\n    setContacts(prevContacts => {\n      const newContact = {\n        id: nanoid(),\n        name,\n        number,\n      };\n      return [newContact, ...prevContacts];\n    });\n    return true;\n  };\n\n  const removeContact = id => {\n    setContacts(prevContacts =>\n      prevContacts.filter(contact => contact.id !== id)\n    );\n  };\n\n  const handleFilter = ({ target }) => setFilter(target.value);\n\n  const getFilteredContact = () => {\n    if (!filter) {\n      return contacts;\n    }\n    const normalizedFilter = filter.toLowerCase();\n    const result = contacts.filter(({ name }) => {\n      return name.toLowerCase().includes(normalizedFilter);\n    });\n\n    return result;\n  };\n\n  const filteredContacts = getFilteredContact();\n  const isContacts = Boolean(filteredContacts.length);\n\n  return (\n    <div className={styles.wrapper}>\n      <h1>Phonebook</h1>\n      <ContactForm onSubmit={addContact} />\n      <h1>Contacts</h1>\n      <ContactFilter handleChange={handleFilter} />\n      {isContacts && (\n        <ContactList\n          removeContact={removeContact}\n          contacts={filteredContacts}\n        />\n      )}\n      {!isContacts && <p>No contacts</p>}\n    </div>\n  );\n};\n\nexport default Phonebook;\n\n// class App extends Component {\n//   state = {\n//     contacts: [],\n//     filter: '',\n//   };\n\n//   componentDidMount() {\n//     const contacts = JSON.parse(localStorage.getItem('my-contacts'));\n//     if (contacts && contacts.length) {\n//       this.setState({ contacts });\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     const { contacts } = this.state;\n//     if (prevState.items !== items) {\n//       localStorage.setItem('my-contacts', JSON.stringify(contacts));\n//     }\n//   }\n\n//   addContact = ({ name, number }) => {\n//     if (this.isDuplicate(name)) {\n//       alert(`${name} is already in contacts`);\n//       return false;\n//     }\n\n//     this.setState(prevState => {\n//       const { contacts } = prevState;\n//       const newContact = {\n//         id: nanoid(),\n//         name,\n//         number,\n//       };\n//       return { contacts: [newContact, ...contacts] };\n//     });\n//     return true;\n//   };\n\n//   handleFilter = ({ target }) => {\n//     this.setState({ filter: target.value });\n//   };\n\n//   removeContact = id => {\n//     this.setState(({ contacts }) => {\n//       const newContact = contacts.filter(contact => contact.id !== id);\n//       return { contacts: newContact };\n//     });\n//   };\n\n//   isDuplicate(name) {\n//     const normalizedName = name.toUpperCase();\n//     const { contacts } = this.state;\n//     const result = contacts.find(({ name }) => {\n//       return name.toUpperCase() === normalizedName;\n//     });\n//     return Boolean(result);\n//   }\n\n//   getFilteredContact() {\n//     const { filter, contacts } = this.state;\n//     if (!filter) {\n//       return contacts;\n//     }\n//     const normalizedFilter = filter.toLowerCase();\n//     const result = contacts.filter(({ name }) => {\n//       return name.toLowerCase().includes(normalizedFilter);\n//     });\n\n//     return result;\n//   }\n\n//   render() {\n//     const { addContact, handleFilter, removeContact } = this;\n//     const contacts = this.getFilteredContact();\n\n//     return (\n//       <div className={styles.wrapper}>\n//         <h1>Phonebook</h1>\n//         <ContactForm onSubmit={addContact} />\n//         <h1>Contacts</h1>\n//         <ContactFilter handleChange={handleFilter} />\n//         <ContactList removeContact={removeContact} contacts={contacts} />\n//       </div>\n//     );\n//   }\n// }\n","import Phonebook from 'modules/Phonebook/Phonebook';\n\nconst Home = () => {\n  return <Phonebook />;\n};\n\nexport default Home;\n"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","onSubmit","useState","name","number","state","setState","handleChange","prevState","className","styles","e","preventDefault","onChange","type","pattern","title","required","id","removeContact","onClick","ContactList","contacts","map","defaultProps","htmlFor","placeholder","JSON","parse","localStorage","getItem","setContacts","setFilter","useEffect","setItem","stringify","filteredContacts","normalizedFilter","toLowerCase","includes","getFilteredContact","isContacts","Boolean","normalizedName","toUpperCase","result","find","isDuplicate","alert","prevContacts","nanoid","contact"],"sourceRoot":""}